# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CubixCryptoWalletApi
  # APIController
  class APIController < BaseController
    @instance = APIController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Create App
    # @param [String] app_name Required parameter: Example:
    # @param [String] secret Required parameter: Example:
    # @param [String] is_cache_enabled Required parameter: Example:
    # @param [String] is_qeue_enabled Required parameter: Example:
    # @param [String] max_users Required parameter: Example:
    # @param [String] token Required parameter: Example:
    # @return void response from the API call
    def create_app_post(app_name,
                        secret,
                        is_cache_enabled,
                        is_qeue_enabled,
                        max_users,
                        token)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/createApp'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'token' => token
      }

      # Prepare form parameters.
      _parameters = {
        'app_name' => app_name,
        'secret' => secret,
        'is_cache_enabled' => is_cache_enabled,
        'is_qeue_enabled' => is_qeue_enabled,
        'max_users' => max_users
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # Wallet broadcast when done
    # @param [String] tx Required parameter: Example:
    # @param [String] file Required parameter: Example:
    # @param [String] token Required parameter: Example:
    # @param [String] identifier Required parameter: Example:
    # @return void response from the API call
    def create_wallet_broadcast_post(tx,
                                     file,
                                     token,
                                     identifier)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/broadcast'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'tx' => tx,
        'file' => file,
        'token' => token,
        'identifier' => identifier
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # Send bitcoins to any wallet address
    # @param [String] token Required parameter: Example:
    # @param [String] file Required parameter: Example:
    # @param [String] identifier Required parameter: Example:
    # @param [String] address Required parameter: Example:
    # @param [String] amount Required parameter: Example:
    # @param [String] note Required parameter: Example:
    # @return void response from the API call
    def create_wallet_wallet_send_post(token,
                                       file,
                                       identifier,
                                       address,
                                       amount,
                                       note)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/walletSend'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'token' => token,
        'file' => file,
        'identifier' => identifier,
        'address' => address,
        'amount' => amount,
        'note' => note
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # Reject the wallet when need to sign
    # @param [String] file Required parameter: Example:
    # @param [String] tx Required parameter: Example:
    # @param [String] reason Required parameter: Example:
    # @param [String] token Required parameter: Example:
    # @param [String] identifier Required parameter: Example:
    # @return void response from the API call
    def create_wallet_reject_post(file,
                                  tx,
                                  reason,
                                  token,
                                  identifier)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/reject'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'file' => file,
        'tx' => tx,
        'reason' => reason,
        'token' => token,
        'identifier' => identifier
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # Create Wallet address
    # @param [String] token Required parameter: Example:
    # @param [String] file Required parameter: Example:
    # @param [String] identifier Required parameter: Example:
    # @return void response from the API call
    def create_wallet_create_address_post(token,
                                          file,
                                          identifier)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/createAddress'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'token' => token,
        'file' => file,
        'identifier' => identifier
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # get All wallet addresses
    # @param [String] token Required parameter: Example:
    # @param [String] file Required parameter: Example:
    # @param [String] identifier Required parameter: Example:
    # @return void response from the API call
    def create_wallet_get_addresses_post(token,
                                         file,
                                         identifier)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/getAddresses'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'token' => token,
        'file' => file,
        'identifier' => identifier
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # Get Status of wallet
    # @param [String] token Required parameter: Example:
    # @param [String] file Required parameter: Example:
    # @param [String] identifier Required parameter: Example:
    # @return void response from the API call
    def create_wallet_status_post(token,
                                  file,
                                  identifier)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/status'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'token' => token,
        'file' => file,
        'identifier' => identifier
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # Get Wallets
    # @param [String] token Required parameter: Example:
    # @param [String] identifier Required parameter: Example:
    # @param [String] limit Required parameter: Example:
    # @return void response from the API call
    def create_wallet_get_wallets_post(token,
                                       identifier,
                                       limit)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/getWallets'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'token' => token,
        'identifier' => identifier,
        'limit' => limit
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # Create user wallet
    # @param [String] token Required parameter: (required) Application token
    # @param [String] wallet_name Required parameter: (required)
    # @param [String] mn Required parameter: (optional)
    # @param [String] passphrase Required parameter: (optional)
    # @param [String] identifier Required parameter: (required)
    # @return void response from the API call
    def create_wallet_create_post(token,
                                  wallet_name,
                                  mn,
                                  passphrase,
                                  identifier)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/create'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'token' => token,
        'walletName' => wallet_name,
        'mn' => mn,
        'passphrase' => passphrase,
        'identifier' => identifier
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # Sign the wallet
    # @param [String] token Required parameter: Example:
    # @param [String] file Required parameter: Example:
    # @param [String] tx Required parameter: Example:
    # @param [String] identifier Required parameter: Example:
    # @return void response from the API call
    def create_wallet_sign_post(token,
                                file,
                                tx,
                                identifier)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/sign'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'token' => token,
        'file' => file,
        'tx' => tx,
        'identifier' => identifier
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # Get balance of wallet
    # @param [String] token Required parameter: Example:
    # @param [String] file Required parameter: Example:
    # @param [String] identifier Required parameter: Example:
    # @return void response from the API call
    def create_wallet_wallet_balance_post(token,
                                          file,
                                          identifier)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/walletBalance'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'token' => token,
        'file' => file,
        'identifier' => identifier
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # wallet proposals
    # @param [String] token Required parameter: Example:
    # @param [String] file Required parameter: Example:
    # @param [String] identifier Required parameter: Example:
    # @param [String] tx Required parameter: Example:
    # @return void response from the API call
    def create_wallet_txproposals_post(token,
                                       file,
                                       identifier,
                                       tx)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/txproposals'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'token' => token,
        'file' => file,
        'identifier' => identifier,
        'tx' => tx
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # Join user to wallet
    # @param [String] secret Required parameter: Example:
    # @param [String] copayer Required parameter: Example:
    # @param [String] token Required parameter: Example:
    # @param [String] passphrase Required parameter: Example:
    # @param [String] identifier Required parameter: Example:
    # @return void response from the API call
    def create_wallet_walletjoin_post(secret,
                                      copayer,
                                      token,
                                      passphrase,
                                      identifier)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/walletjoin'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'secret' => secret,
        'copayer' => copayer,
        'token' => token,
        'passphrase' => passphrase,
        'identifier' => identifier
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end

    # Get Wallet History of trasaction
    # @param [String] file Required parameter: Example:
    # @param [String] token Required parameter: Example:
    # @param [String] identifier Required parameter: Example:
    # @return void response from the API call
    def create_wallet_history_post(file,
                                   token,
                                   identifier)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/wallet/history'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'file' => file,
        'token' => token,
        'identifier' => identifier
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      _context = execute_request(_request)
      validate_response(_context)
    end
  end
end
